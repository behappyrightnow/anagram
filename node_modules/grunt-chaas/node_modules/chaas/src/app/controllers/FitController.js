// <reference path="../app.ts">
// (function(){
var FitController = (function () {
    function FitController($http, $routeParams, CONFIG) {
        var _this = this;
        CONFIG.then(function () {
            _this.config = CONFIG;

            _this.loadData($http, $routeParams.page);
        });

        this.editMode = false;
        this.rawText = "";
        this.$http = $http;
    }
    FitController.prototype.loadData = function ($http, page) {
        this.pageTitle = page;
        var that = this;
        console.log("Loading data from " + this.config.path(this.config.wiki, page));
        $http({ method: 'GET', url: this.config.path(this.config.wiki, page) }).success(function (data, status, headers, config) {
            that.rawText = data;
            var lines = data.split("\n");
            that.pageContents = fitUtils.wikiData(lines, $http);
        }).error(function (data, status, headers, config) {
            console.log("error!");
        });
    };
    FitController.prototype.runFitTestsOnPage = function () {
        var _this = this;
        console.log("Running fit tests");
        var tables = _.filter(this.pageContents, function (element) {
            return element.type === 'TABLE';
        });
        _.each(tables, function (table) {
            _this.process(table);
        });
    };

    FitController.prototype.process = function (tableEl) {
        var processor = this.createProcessor(tableEl.firstRow());
        processor.process(tableEl);
    };

    FitController.prototype.createProcessor = function (firstRow) {
        if (firstRow.length === 1) {
            return new DecisionProcessor(fitUtils);
        } else {
            var firstCell = firstRow[0].cellEntry.toUpperCase();
            if (firstCell.indexOf("QUERY") !== -1) {
                return new QueryProcessor(fitUtils);
            } else if (firstCell.indexOf("SCRIPT") !== -1) {
                return new ScriptProcessor(fitUtils);
            } else {
                throw "Could not understand which Processor needs to be instantiated!";
            }
        }
    };

    FitController.prototype.editPage = function () {
        this.editMode = true;
    };

    FitController.prototype.savePage = function () {
        var lines = this.rawText.split("\n");
        this.pageContents = fitUtils.wikiData(lines, this.$http);
        this.editMode = false;
        console.log(this.pageTitle);
        console.log(this.rawText);
        var that = this;
        var data = { name: this.pageTitle, contents: this.rawText };
        jQuery.post("/page", data).done(function (data) {
            console.log("Done posting data");
        });
        /*this.$http({method:"POST",url:"/page",data:data}
        ).
        success(function(data, status, headers, config) {
        console.log("Saved successfully");
        }).
        error(function(data, status, headers, config) {
        console.log("Error! Could not save "+that.rawText);
        });*/
    };

    FitController.prototype.pasteContent = function (event) {
        var pasteProcessor = new PasteProcessor(event);
        pasteProcessor.process();
        if (pasteProcessor.rows !== undefined && pasteProcessor.rows.length > 0) {
            this.rawText += "\n";
        }
        for (var i = 0; i < pasteProcessor.rows.length; i++) {
            var row = pasteProcessor.rows[i];
            var line = "|";
            for (var j = 0; j < row.length && row[j] !== ""; j++) {
                line += row[j];
                if (j >= 0 && j < row.length) {
                    line += "|";
                }
            }
            this.rawText += line + "\n";
        }
        this.savePage();
        console.log("Pasted ", pasteProcessor.rows);
    };
    return FitController;
})();

angular.module('chaas').controller('FitController', FitController);
//# sourceMappingURL=FitController.js.map
