var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var FitUtils = (function () {
    function FitUtils() {
    }
    FitUtils.prototype.capitalized = function (word) {
        return word.charAt(0).toUpperCase() + word.slice(1);
    };
    FitUtils.prototype.camelCaseClass = function (text) {
        var words = text.split(" ");
        var answer = "";
        for (var i = 0; i < words.length; i++) {
            answer += this.capitalized(words[i]);
        }
        return answer;
    };

    FitUtils.prototype.camelCase = function (text) {
        if (text.indexOf(" ") === -1) {
            return text;
        }
        var words = text.split(" ");
        var answer = words[0];
        for (var i = 1; i < words.length; i++) {
            answer += this.capitalized(words[i]);
        }
        return answer;
    };

    FitUtils.prototype.wikiData = function (lines, $http) {
        var tableFound = false;
        var tableElement;
        var answer = new Array();
        _.each(lines, function (line) {
            if (!tableFound) {
                if (line.charAt(0) === '|') {
                    tableFound = true;
                    tableElement = new TableWikiElement();
                    tableElement.addRow(line);
                } else {
                    answer.push(new DefaultElement(line, $http));
                }
            } else if (tableFound) {
                if (line.charAt(0) !== '|') {
                    tableFound = false;
                    answer.push(tableElement);
                    tableElement = null;
                    answer.push(new DefaultElement(line));
                } else {
                    tableElement.addRow(line);
                }
            }
        });
        if (tableElement !== null && tableElement !== undefined) {
            answer.push(tableElement);
        }
        return answer;
    };
    return FitUtils;
})();

var DefaultElement = (function () {
    function DefaultElement(line, $http) {
        this.contents = new Array();
        this.type = "DEFAULT";
        this.process(line, $http);
    }
    DefaultElement.prototype.process = function (line, $http) {
        var state = new WikiState.MinusOne("", "");
        var accumulation = new Array();
        state.transition(accumulation, line, 0);
        for (var i = 0; i < accumulation.length; i++) {
            this.contents.push(accumulation[i].createAtomicElement($http));
        }
    };
    return DefaultElement;
})();

/**
* See FitUtils_automata.JPG in the execJS folder to understand the finite automata implemented here.
*/
var WikiState;
(function (WikiState) {
    var State = (function () {
        function State(text, oldText) {
            this.text = text;
            this.oldText = oldText;
        }
        State.prototype.transition = function (contents, line, index) {
            var character = line[index];
            if (character === undefined) {
                this.endInputTransition(contents);
                return;
            }
            var state = this.nextState(contents, character);
            if (index < line.length - 1) {
                state.transition(contents, line, index + 1);
            } else {
                state.endInputTransition(contents);
            }
        };
        State.prototype.endInputTransition = function (contents) {
            throw "Can't call directly";
        };
        State.prototype.nextState = function (contents, character) {
            throw "Can't call directly";
        };
        State.prototype.createAtomicElement = function ($http) {
            throw "Can't call directly";
        };
        return State;
    })();
    WikiState.State = State;
    var MinusOne = (function (_super) {
        __extends(MinusOne, _super);
        function MinusOne() {
            _super.apply(this, arguments);
        }
        MinusOne.prototype.nextState = function (contents, character) {
            if (character >= 'A' && character <= 'Z') {
                return new Zero(character, this.text);
            } else {
                return new MinusOne(this.text + character, "");
            }
        };
        MinusOne.prototype.endInputTransition = function (contents) {
            contents.push(this);
        };
        MinusOne.prototype.createAtomicElement = function ($http) {
            return new TextElement(this.text);
        };
        return MinusOne;
    })(State);
    WikiState.MinusOne = MinusOne;
    var Zero = (function (_super) {
        __extends(Zero, _super);
        function Zero() {
            _super.apply(this, arguments);
        }
        Zero.prototype.nextState = function (contents, character) {
            if (character >= 'a' && character <= 'z') {
                return new One(this.text + character, this.oldText);
            } else {
                return new MinusOne(this.oldText + this.text + character, "");
            }
        };
        Zero.prototype.endInputTransition = function (contents) {
            contents.push(new MinusOne(this.oldText, ""));
        };
        return Zero;
    })(State);
    WikiState.Zero = Zero;
    var One = (function (_super) {
        __extends(One, _super);
        function One() {
            _super.apply(this, arguments);
        }
        One.prototype.nextState = function (contents, character) {
            if (character >= 'a' && character <= 'z') {
                return new One(this.text + character, this.oldText);
            } else if (character >= 'A' && character <= 'Z') {
                return new Two(this.text + character, this.oldText);
            } else {
                return new MinusOne(this.oldText + this.text + character, "");
            }
        };

        One.prototype.endInputTransition = function (contents) {
            contents.push(new MinusOne(this.oldText, ""));
        };
        return One;
    })(State);
    WikiState.One = One;
    var Two = (function (_super) {
        __extends(Two, _super);
        function Two() {
            _super.apply(this, arguments);
        }
        Two.prototype.nextState = function (contents, character) {
            if ((character >= 'a' && character <= 'z') || (character >= 'A' && character <= 'Z')) {
                return new Two(this.text + character, this.oldText);
            } else {
                contents.push(new MinusOne(this.oldText, ""));
                return new Three(this.text, character);
            }
        };

        Two.prototype.endInputTransition = function (contents) {
            contents.push(new Three(this.text, ""));
        };
        return Two;
    })(State);
    WikiState.Two = Two;
    var Three = (function (_super) {
        __extends(Three, _super);
        function Three() {
            _super.apply(this, arguments);
        }
        Three.prototype.nextState = function (contents, character) {
            contents.push(this);
            return new MinusOne(this.oldText + character, "");
        };

        Three.prototype.endInputTransition = function (contents) {
        };
        Three.prototype.createAtomicElement = function ($http) {
            return new LinkElement(this.text, $http);
        };
        return Three;
    })(State);
    WikiState.Three = Three;
})(WikiState || (WikiState = {}));

var TextElement = (function () {
    function TextElement(text) {
        this.text = text;
        this.type = "TEXT";
    }
    return TextElement;
})();
var LinkElement = (function () {
    function LinkElement(text, $http) {
        this.text = text;

        this.type = "LINK";
        var that = this;
    }
    LinkElement.prototype.url = function () {
        return '#/' + this.text;
    };
    return LinkElement;
})();

var TableWikiElement = (function () {
    function TableWikiElement() {
        this.type = "TABLE";
        this.rows = new Array();
        this.maxCols = 1;
    }
    TableWikiElement.prototype.addRow = function (row) {
        var cells = this.parseCells(row);
        var cellElements = new Array();
        _.each(cells, function (cell) {
            cellElements.push(new CellWikiElement(cell));
        });
        this.rows.push(cellElements);
        if (cells.length > this.maxCols) {
            this.maxCols = cells.length;
        }
    };

    TableWikiElement.prototype.firstRow = function () {
        return this.rows[0];
    };

    TableWikiElement.prototype.parseCells = function (row) {
        var tempLine = row.substr(1);
        var lastSlashLoc = tempLine.lastIndexOf("|");
        tempLine = tempLine.substr(0, lastSlashLoc);
        return tempLine.split("|");
    };
    return TableWikiElement;
})();

var CellWikiElement = (function () {
    function CellWikiElement(cellEntry) {
        this.cellEntry = cellEntry;
        this.status = "IDLE";
        this.msg = null;
        this.expected = null;
        this.actual = null;
    }
    return CellWikiElement;
})();
var fitUtils = new FitUtils();

var Method = (function () {
    function Method(methodString, isInput) {
        this.methodName = fitUtils.camelCase(methodString);
        this.isInput = isInput;
    }
    Method.prototype.passInput = function (objectUnderTest, data) {
        if (objectUnderTest[this.methodName] === undefined || typeof objectUnderTest[this.methodName] !== 'function') {
            objectUnderTest[this.methodName] = data;
        } else {
            objectUnderTest[this.methodName](data);
        }
    };

    Method.prototype.fetchOutput = function (objectUnderTest) {
        var retVal;
        if (objectUnderTest[this.methodName] === undefined || typeof objectUnderTest[this.methodName] !== 'function') {
            if (objectUnderTest[this.methodName] !== undefined) {
                retVal = objectUnderTest[this.methodName];
            }
        } else {
            retVal = objectUnderTest[this.methodName]();
        }

        return retVal;
    };
    return Method;
})();
//# sourceMappingURL=FitUtils.js.map
